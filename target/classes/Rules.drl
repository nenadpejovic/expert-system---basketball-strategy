
package org.silab.rules
 
import org.silab.expertsystem.model.Player
import org.silab.expertsystem.model.GameEvent
import org.silab.expertsystem.model.Game
	

declare GameEvent
	@role( event )
	@expires(5m)
end



/*rule "Opponent C scores to many points"
lock-on-active true
	when 
		g  : Game()
		ge1 : GameEvent(score > 10)
		ge2 : GameEvent(score < 6, this.opponentC.points >= ge1.opponentC.points+4, subsC.hurt == false, subsC.sentOff == false, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then 
		Player help = g.getC();
		g.setC(g.getSubsC());
		g.setSubsC(help);
		g.addExplanation("Recently, many points are scored by opponents C, so the solution is to substitute current C with the backup C to improve defense.");
		update(g);			
end

rule "Opponent PG scores to many points"
lock-on-active true
	when 
		g  : Game()
		ge1 : GameEvent(score > 10)
		ge2 : GameEvent(score < 6, this.opponentPg.points >= ge1.opponentPg.points+4, subsC.hurt == false, subsC.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then 
		Player help = g.getPg();
		g.setPg(g.getSubsPg());
		g.setPg(help);
		g.addExplanation("Recently, many points are scored by opponents PG, so the solution is to substitute current PG with the backup PG to improve defense.");
		update(g);			
end

rule "PG has problems with personal fouls"
lock-on-active true
	when
		g : Game()
		ge1: GameEvent()
		ge2 : GameEvent(this.pg.personalFouls >= ge1.pg.perosnalFouls+2, subsPg.hurt == false, subsPg.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then
		Player help = g.getPg();
		g.setPg(g.getSubsPg());
		g.setPg(help);
		g.addExplanation("Recently, PG is commiting to many fouls, so the solution is to substitute current PG with the backup PG.");
		update(g);	
	end

rule "SG has problems with personal fouls"
lock-on-active true
	when
		g : Game()
		ge1: GameEvent()
		ge2 : GameEvent(this.sg.personalFouls >= ge1.sg.perosnalFouls+2, subsSg.hurt == false, subsSg.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then
		Player help = g.getSg();
		g.setPg(g.getSubsSg());
		g.setSg(help);
		g.addExplanation("Recently, SG is commiting to many fouls, so the solution is to substitute current SG with the backup SG.");
		update(g);	
	end	

rule "SF has problems with personal fouls"
lock-on-active true
	when
		g : Game()
		ge1: GameEvent()
		ge2 : GameEvent(this.sf.personalFouls >= ge1.sf.perosnalFouls+2, subsSf.hurt == false, subsSf.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then
		Player help = g.getSf();
		g.setSf(g.getSubsSf());
		g.setSf(help);
		g.addExplanation("Recently, SF is commiting to many fouls, so the solution is to substitute current SF with the backup SF.");
		update(g);	
	end
	
rule "PF has problems with personal fouls"
lock-on-active true
	when
		g : Game()
		ge1: GameEvent()
		ge2 : GameEvent(this.pf.personalFouls >= ge1.pf.perosnalFouls+2, subsPf.hurt == false, subsPf.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then
		Player help = g.getPf();
		g.setPf(g.getSubsPf());
		g.setPf(help);
		g.addExplanation("Recently, PF is commiting to many fouls, so the solution is to substitute current PF with the backup PF.");
		update(g);	
	end	
	
rule "C has problems with personal fouls"
lock-on-active true
	when
		g : Game()
		ge1: GameEvent()
		ge2 : GameEvent(this.c.personalFouls >= ge1.c.perosnalFouls+2, subsC.hurt == false, subsC.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then
		Player help = g.getC();
		g.setC(g.getSubsC());
		g.setC(help);
		g.addExplanation("Recently, C is commiting to many fouls, so the solution is to substitute current C with the backup C.");
		update(g);	
	end	

rule "Opponent C is dominate under the basket"
lock-on-active true
	when
		g : Game()
		ge1: GameEvent()
		ge2 : GameEvent(this.opponentC.rebounds >= ge1.opponentC.rebounds+2, subsC.hurt == false, subsC.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then
		Player help = g.getC();
		g.setC(g.getSubsC());
		g.setC(help);
		g.addExplanation("Recently, opponet C grabs to many rebounds, so the solution is to substitute current C with the backup C.");
		update(g);	
	end	
	
rule "Opponent PG makes to many assists"
lock-on-active true
	when 
		g  : Game()
		ge1 : GameEvent()
		ge2 : GameEvent(this.opponentPg.assists >= ge1.opponentPg.assists+2, subsC.hurt == false, subsC.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then 
		Player help = g.getPg();
		g.setPg(g.getSubsPg());
		g.setPg(help);
		g.addExplanation("Recently, opponents PG is making to many assists, so the solution is to substitute current PG with the backup PG to improve defense.");
		update(g);			
end	

rule "Opponent PG commits to many steals"
lock-on-active true
	when 
		g  : Game()
		ge1 : GameEvent()
		ge2 : GameEvent(this.opponentPg.steals >= ge1.opponentPg.steals+2, subsC.hurt == false, subsC.sentOff, this after [5s,1m30s] ge1) from entry-point DEFAULT
	then 
		Player help = g.getPg();
		g.setPg(g.getSubsPg());
		g.setPg(help);
		g.addExplanation("Recently, opponents PG is commitins to many steals, so the solution is to substitute current PG with the backup PG to improve offense.");
		update(g);			
end	
	
rule "Bad start of a PG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute < 2,score<-7,pg.pir < 1,subsPg.hurt==false,subsPg.sentOff==false) over window:time(20s) from entry-point DEFAULT 
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getPg());
    	g.setPg(helpVariable);	
    	g.addExplanation("Less than two minutes have been passed, the team is losing with more then 7 points and pir of PG is less than 1, so the best solution is to substite current PG with the backup PG.");
        update( g );
end */

rule "Bad start of a SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute < 2,score<-7,sg.pir < 1,subsSf.hurt==false,subsSf.sentOff==false) over window:time(20s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getSubsSf());
    	g.setSubsSf(helpVariable);
    	g.addExplanation("Less than two minutes have been passed, the team is losing with more then 7 points and pir of SG is less than 1, so the best solution is to substite current SG with the backup SG.");	
        update( g );
end

rule "Bad start of a SF"
lock-on-active true
    when
        g : Game()
        ge : GameEvent(minute < 2,score<-7,sf.pir < 1,subsSf.hurt==false,subsSf.sentOff==false) over window:time(20s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSf();
    	g.setSf(g.getSubsSf());
    	g.setSubsSf(helpVariable);
    	g.addExplanation("Less than two minutes have been passed, the team is losing with more then 7 points and pir of SF is less than 1, so the best solution is to substite current SF with the backup SF.");		
        update( g );
end

rule "Bad start of a PF"
lock-on-active true
    when
        g : Game()
        ge : GameEvent(minute < 2,score<-7,pf.pir < 1,subsPf.hurt==false,subsPf.sentOff==false) over window:time(20s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPf();
    	g.setPf(g.getSubsPf());
    	g.setSubsPf(helpVariable);	
    	g.addExplanation("Less than two minutes have been passed, the team is losing with more then 7 points and pir of PF is less than 1, so the best solution is to substite current PF with the backup PF.");	
        update( g );
end

rule "Bad start of a C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute < 2,score<-7,c.pir < 1,subsC.hurt==false,subsC.sentOff==false) over window:time(20s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getSubsC());
    	g.setSubsC(helpVariable);	
    	g.addExplanation("Less than two minutes have been passed, the team is losing with more then 7 points and pir of C is less than 1, so the best solution is to substite current C with the backup C.");	
        update( g );
end

rule "Bad play of a PG and better play of a PG/SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pg.pir < -10,pgSg.pir > -10,pgSg.hurt==false,pgSg.sentOff==false) over window:time(20s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getPgSg());
    	g.setPgSg(helpVariable);	
    	g.addExplanation("Current PG is in a bad form in the game (pir less than -10), and player on a PG/SG position is in a better form (pir greated than -10), so the best solution is to substitute current PG with the PG/SG");	
        update( g );
end

rule "Bad play of a PG and better play of a backup PG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pg.pir < -10,subsPg.pir > -10,subsPg.hurt==false,subsPg.sentOff==false) over window:time(20s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("Current PG is in a bad form in the game (pir less than -10), and player that is a substitue for PG position is in a better form (pir greated than -10), so the best solution is to substitute current PG with the backup PG ");	
        update( g );
end

rule "Bad play of a SG and better play of a backup SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sg.pir < -10,subsSf.pir > -10,subsSf.hurt==false,subsSf.sentOff==false) over window:time(20s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getSubsSf());
    	g.setSubsSf(helpVariable);
    	g.addExplanation("Current SG is in a bad form in the game (pir less than -10), and player that is a substitue for SG position is in a better form (pir greated than -10), so the best solution is to substitute current SG with the backup SG ");		
        update( g );
end

rule "Bad play of a SG and better play of a PG/SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sg.pir < -10,pgSg.pir > -10,pgSg.hurt==false,pgSg.sentOff==false) over window:time(20s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getPgSg());
    	g.setPgSg(helpVariable);	
    	g.addExplanation("Current SG is in a bad form in the game (pir less than -10), and player on a PG/SG position is in a better form (pir greated than -10), so the best solution is to substitute current SG with the PG/SG");	
        update( g );
end

rule "Bad play of a SF and better play of a backup SF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sf.pir < -10,subsSf.pir > -10,subsSf.hurt==false,subsSf.sentOff==false)
    then
    	Player helpVariable = g.getSf();
    	g.setSf(g.getSubsSf());
    	g.setSubsSf(helpVariable);
    	g.addExplanation("Current SF is in a bad form in the game (pir less than -10), and player that is a substitue for SG position is in a better form (pir greated than -10), so the best solution is to substitute current SF with the backup SF");			
        update( g );
end

rule "Bad play of a PF and better play of a backup PF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pf.pir < -10,subsPf.pir > -10,subsPf.hurt==false,subsPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPf();
    	g.setPf(g.getSubsPf());
    	g.setSubsPf(helpVariable);	
    	g.addExplanation("Current PF is in a bad form in the game (pir less than -10), and player that is a substitue for PF position is in a better form (pir greated than -10), so the best solution is to substitute current PF with the backup PF.");			
        update( g );
end

rule "Bad play of a PF and better play of a PF/C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pf.pir < -10,cPf.pir > -10,cPf.hurt==false,cPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPf();
    	g.setPf(g.getcPf());
    	g.setcPf(helpVariable);	
    	g.addExplanation("Current PF is in a bad form in the game (pir less than -10), and player that is a substitue for PF position is in a better form (pir greated than -10), so the best solution is to substitute current PF with the backup PF.");
        update( g );
end

rule "Bad play of a C and better play of a backup C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(c.pir < -10,subsC.pir > -10,subsC.hurt==false,subsC.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getSubsC());
    	g.setSubsC(helpVariable);	
    	g.addExplanation("Current C is in a bad form in the game (pir less than -10), and player that is a substitue for C position is in a better form (pir greated than -10), so the best solution is to substitute current C with the backup C.");			
        update( g );
end

rule "Bad play of a C and better play of a PF/C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(c.pir < -10,cPf.pir > -10,cPf.hurt==false,cPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getcPf());
    	g.setcPf(helpVariable);
    	g.addExplanation("Current C is in a bad form in the game (pir less than -10), and player that is on a PF/C position is in a better form (pir greated than -10), so the best solution is to substitute current C with the PF/C.");	
        update( g );
end

rule "Bad play and tiredness of a PG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pg.pir < -5,pg.indexOfTiredness > 10,subsPg.hurt==false,subsPg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("Current PG is in a bad form in the game (pir less than -10) and he is tired (index of tiredness greater than 10), so the best solution is to substite current PG with the backup PG.");
        update(g);
end

rule "Bad play and tiredness of a SG"
lock-on-active true
    when
        g : Game()
        ge : GameEvent(sg.pir < -5,sg.indexOfTiredness > 10,subsSf.hurt==false,subsSf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getSubsSf());
    	g.setSubsSf(helpVariable);
    	g.addExplanation("Current SG is in a bad form in the game (pir less than -10) and he is tired (index of tiredness greater than 10), so the best solution is to substite current SG with the backup SG.");	
        update(g);
end

rule "Bad play and tiredness of a SF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sf.pir < -5,sf.indexOfTiredness > 10,subsSf.hurt==false,subsSf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSf();
    	g.setSf(g.getSubsSf());
    	g.setSubsSf(helpVariable);
    	g.addExplanation("Current SF is in a bad form in the game (pir less than -10) and he is tired (index of tiredness greater than 10), so the best solution is to substite current SF with the backup SF.");	
        update(g);
end
rule "Bad play and tiredness of a PF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pf.pir < -5,pf.indexOfTiredness > 10,subsPf.hurt==false,subsPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPf();
    	g.setPf(g.getSubsPf());
    	g.setSubsPf(helpVariable);
    	g.addExplanation("Current PF is in a bad form in the game (pir less than -10) and he is tired (index of tiredness greater than 10), so the best solution is to substite current PF with the backup PF.");		
        update(g);
end

rule "Bad play and tiredness of a C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(c.pir < -5,c.indexOfTiredness > 10,subsC.hurt==false,subsC.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getSubsC());
    	g.setSubsC(helpVariable);
    	g.addExplanation("Current C is in a bad form in the game (pir less than -10) and he is tired (index of tiredness greater than 10), so the best solution is to substite current C with the backup C.");
        update(g);
end

rule "Issue with personal fouls of a PG and less number of personal fouls of a backup PG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pg.personalFouls >= 3,subsPg.personalFouls < 3 && minute > 20,subsPg.hurt==false,subsPg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("20 minutes of game have been passed, current PG has more than 3 personal fouls, and backup PG has less personal fouls, so the best solution is to substitute PG with the backup PG.");
        update(g);
end

rule "Issue with personal fouls of a PG and less number of personal fouls of a PG/SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pg.personalFouls >= 3,pgSg.personalFouls < 3 && minute > 20,pgSg.hurt==false,pgSg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getPgSg());
    	g.setPgSg(helpVariable);
    	g.addExplanation("20 minutes of game have been passed, current PG has more than 3 personal fouls, and PG/SG has less personal fouls, so the best solution is to substitute PG with the PG/SG.");	
        update( g );
end

rule "Issue with personal fouls of a SG and less number of personal fouls of a backup SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sg.personalFouls >= 3,subsSg.personalFouls < 3 && minute > 20,subsSg.hurt==false,subsSg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getSubsSg());
    	g.setSubsSg(helpVariable);
    	g.addExplanation("20 minutes of game have been passed, current SG has more than 3 personal fouls, and backup SG has less personal fouls, so the best solution is to substitute SG with the backup SG.");	
        update( g );
end

rule "Issue with personal fouls of a SG and less number of personal fouls of a PG/SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sg.personalFouls >= 3,pgSg.personalFouls < 3 && minute > 20,pgSg.hurt==false,pgSg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getPgSg());
    	g.setPgSg(helpVariable);
    	g.addExplanation("20 minutes of game have been passed, current PG has more than 3 personal fouls, and PG/SG has less personal fouls, so the best solution is to substitute SG with the PG/SG.");	
        update( g );
end

rule "Issue with personal fouls of a SF and less number of personal fouls of a backup SF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sf.personalFouls >= 3,subsSf.personalFouls < 3 && minute > 20,subsSf.hurt==false,subsSf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSf();
    	g.setSf(g.getSubsSf());
    	g.setSubsSf(helpVariable);	
    	g.addExplanation("20 minutes of game have been passed, current SF has more than 3 personal fouls, and SF has less personal fouls, so the best solution is to substitute SF with the backup SF.");
        update( g );
end

rule "Issue with personal fouls of a PF and less number of personal fouls of a backup PF"
lock-on-active true	
    when
    	g : Game()
        ge : GameEvent(pf.personalFouls >= 3,subsPf.personalFouls < 3 && minute > 20,subsPf.hurt==false,subsPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPf();
    	g.setPf(g.getSubsPf());
    	g.setSubsPf(helpVariable);	
    	g.addExplanation("20 minutes of game have been passed, current PF has more than 3 personal fouls, and backup PF has less personal fouls, so the best solution is to substitute PF with the backup PF.");
        update( g );
end

rule "Issue with personal fouls of a PF and less number of personal fouls of a PF/C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pf.personalFouls >= 3,cPf.personalFouls < 3 && minute > 20,subsC.hurt==false,subsC.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPf();
    	g.setPf(g.getcPf());
    	g.setcPf(helpVariable);	
    	g.addExplanation("20 minutes of game have been passed, current PF has more than 3 personal fouls, and PF/C has less personal fouls, so the best solution is to substitute PF with the PF/C.");
        update( g );
end

rule "Issue with personal fouls of a C and less number of personal fouls of a backup C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(c.personalFouls >= 3,subsC.personalFouls < 3 && minute > 20,subsC.hurt==false,subsC.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getSubsC());
    	g.setSubsC(helpVariable);	
    	g.addExplanation("20 minutes of game have been passed, current C has more than 3 personal fouls, and backup C has less personal fouls, so the best solution is to substitute C with the backup C.");
        update( g );
end

rule "Issue with personal fouls of a C and less number of personal fouls of a PF/C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(c.personalFouls >= 3,cPf.personalFouls < 3 && minute > 20,cPf.hurt==false,cPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getcPf());
    	g.setcPf(helpVariable);
    	g.addExplanation("20 minutes of game have been passed, current C has more than 3 personal fouls, and PF/C has less personal fouls, so the best solution is to substitute C with the PF/C.");	
        update( g );
end

rule "Problems with game organization against low quality team"
lock-on-active true
    when
    	g : Game(qualityOfOpponent =="bad")
        ge : GameEvent(minute>15,score > -5,subsPg.hurt==false,subsPg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("Opponent team is low quality and more than 15 minutes have been passes, which indicates that there are some problems in game organization so the solution is to substitute PG with the backup PG.");
        update( g );
end

rule "Last seconds before the end of a quarter and in the game is tall C."
lock-on-active true
    when
    	g : Game()
        ge : GameEvent((minute>=9.7 || minute>=19.7 || minute>=29.7 || minute>=39.7)&&c.position=="C"&&cPf.position=="PC/C",cPf.hurt==false,cPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getcPf());
    	g.setcPf(helpVariable);	
    	g.addExplanation("Last 20 seconds of a quarter, and in the game is tall C, so the solution is to substitute C with the backup PF, because the play is based on long distance shot.");
        update( g );
end

rule "Last seconds before the end of a quarter and in the game is worse SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent((minute>=9.7 || minute>=19.7 || minute>=29.7 || minute>=39.7)&&sg.averagePercentageThreePoints<subsSf.averagePercentageThreePoints,subsSf.hurt==false,subsSf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getSubsSf());
    	g.setSubsSf(helpVariable);	
    	g.addExplanation("Last 20 seconds of a quarter, and in the game is worse SG, so the solution is to substitute SG with the backup SG, because the play is based on long distance shot.");
        update( g );
end

rule "Last seconds before the end of a quarter and in the game is worse shooting PG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent((minute>=9.7 || minute>=19.7 || minute>=29.7 || minute>=39.7)&&pg.averagePercentageThreePoints<subsPg.averagePercentageThreePoints,subsPg.hurt==false,subsPg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("Last 20 seconds of a quarter, and in the game is worse shooting PG, so the solution is to substitute PG with the backup PG, because the play is based on long distance shot.");
        update( g );
end

rule "The score is +10 and 25 minutes has been passed"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute>25,score>10) over window:time(30s) from entry-point DEFAULT
    then
    	ge.setTactic("Positional attack with C");	
        update( ge );
end

rule "Realisation of a positional attack with better playing C-1"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(tactic=="Positional attack with C"&&c.position=="PF/C"&&cPf.pir>subsC.pir,cPf.hurt==false,cPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getcPf());
    	g.setcPf(helpVariable);	
    	g.addExplanation("Current tactic is positional attack with C, which means the emphazisis of a C, so the solution is to substitue current C with the PF/C");
        update( g );
end

rule "Realisation of a positional attack with better playing C-2"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(tactic=="Positional attack with C"&&c.position=="PF/C"&&cPf.pir<subsC.pir,subsC.hurt==false,subsC.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getSubsC());
    	g.setcPf(helpVariable);	
    	g.addExplanation("Current tactic is positional attack with C, which means the emphazisis of a C, so the solution is to substitue current C with the backup C.");
        update( g );
end

rule "The score is -10 and 25 minutes has been passed"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute>25,score>-10) over window:time(30s) from entry-point DEFAULT
    then
    	ge.setTactic("Transitional attack with better playing PG");	
        update( g );
end

rule "Realisation of transitional attack with better playing PG-1"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(tactic=="Transitional attack with better playing PG"&&pg.pir<subsPg.pir&&subsPg.pir>pgSg.pir,subsPg.hurt==false,subsPg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("Current tactic is transitional attack with better playing PG, which means the emphazisis of a PG, so the solution is to substitue current PG with the backup PG.");
        update( g );
end

rule "Realisation of transitional attack with better playing PG-2"
lock-on-active true
    when
   		g : Game()
        ge : GameEvent(tactic=="Napadi iz tranzicije sa dobrim pgom"&&pg.pir<pgSg.pir&&subsPg.pir<pgSg.pir,pgSg.hurt==false,pgSg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getPgSg());
    	g.setPgSg(helpVariable);
    	g.addExplanation("Current tactic is transitional attack with better playing PG, which means the emphazisis of a PG, so the solution is to substitue current PG with the PG/SG.");	
        update( g );
end

rule "Last minute and the team hasn't furfilled the bonus-1Q"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute>8&&personalFoulsUntilBonus>2) over window:time(30s) from entry-point DEFAULT
    then
    	ge.setTactic("Aggressive defense play");
        update( ge );
end

rule "Last minute and the team hasn't furfilled the bonus-2Q"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute>18&&personalFoulsUntilBonus>2) over window:time(30s) from entry-point DEFAULT
    then
    	ge.setTactic("Aggressive defense play");
        update( ge );
end

rule "Last minute and the team hasn't furfilled the bonus-3Q"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute>28&&personalFoulsUntilBonus>2)
    then
    	ge.setTactic("Aggressive defense play");
        update( ge );
end

rule "Last minute and the team hasn't furfilled the bonus-4Q"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute>38&&personalFoulsUntilBonus>2) over window:time(30s) from entry-point DEFAULT
    then
    	ge.setTactic("Aggressive defense play");
        update( ge );
end
rule "Realisation of aggresive play-1"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(tactic=="Aggressive defense play"&& minute>20 && sf.personalFouls>subsSf.personalFouls,subsSf.hurt==false,subsSf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSf();
    	g.setSf(g.getSubsSf());
    	g.setSubsSf(helpVariable);	
    	g.addExplanation("The more than 20 minutes have been passed, and the current tactic is aggressive defense play, so the solution is to set the SF with less personal fouls.");
        update( g );
end

rule "Realisation of aggresive play-2"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(tactic=="Aggressive defense play" && minute>20 && sg.personalFouls>subsSg.personalFouls && subsSg.personalFouls < pgSg.personalFouls,subsSg.hurt==false,subsSg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getSubsSg());
    	g.setSubsSf(helpVariable);	
    	g.addExplanation("The more than 20 minutes have been passed, and the current tactic is aggressive defense play, so the solution is to set the SG with less personal fouls.");
        update( g );
end

rule "Realisation of aggresive play-3"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(tactic=="Aggressive defense play" && minute>20 && sg.personalFouls>pgSg.personalFouls && subsSf.personalFouls > pgSg.personalFouls,pgSg.hurt==false,pgSg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getPgSg());
    	g.setPgSg(helpVariable);	
    	g.addExplanation("The more than 20 minutes have been passed, and the current tactic is aggressive defense play, so the solution is to set the SG with less personal fouls.");
        update( g );
end

rule "If the team is host the game is important"
lock-on-active true
    when
    	g : Game(host==true)
    then
    	g.setImportanceOfGame(true);;	
        update( g );
end

rule "If the game is important set the aggressive tactic"
lock-on-active true
    when
        g : Game(importanceOfGame==true)
        ge : GameEvent() over window:time(30s) from entry-point DEFAULT
    then
    	ge.setTactic("Aggressive defense play");
        update( g );
end

rule "Substitute hurted PG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pg.hurt==true,subsPg.hurt==false,subsPg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("It is needed to substitute hurted PG.");
        update( g );
end

rule "Substitute hurted SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sg.hurt==true,subsSf.hurt==false,subsSf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getSubsSf());
    	g.setSubsSf(helpVariable);	
    	g.addExplanation("It is needed to substitute hurted SG.");
        update( g );
end

rule "Substitute hurted SF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sf.hurt==true,subsSf.hurt==false,subsSf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSf();
    	g.setSf(g.getSubsSf());
    	g.setSubsSf(helpVariable);
    	g.addExplanation("It is needed to substitute hurted SF.");	
        update( g );
end

rule "Substitute hurted PF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pf.hurt==true,subsPf.hurt==false,subsPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPf();
    	g.setPf(g.getSubsPf());
    	g.setSubsPf(helpVariable);	
    	g.addExplanation("It is needed to substitute hurted PF.");
        update( g );
end

rule "Substitute hurted C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(c.hurt==true,subsC.hurt==false,subsC.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getSubsC());
    	g.setSubsC(helpVariable);
    	g.addExplanation("It is needed to substitute hurted C.");	
        update( g );
end

rule "C sent off with 5 personal fouls"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(c.personalFouls==5) over window:time(30s) from entry-point DEFAULT
    then
    	g.getC().setSentOff(true);
        update( g );
end

rule "PF sent off with 5 personal fouls"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pf.personalFouls==5) over window:time(30s) from entry-point DEFAULT
    then
    	g.getPf().setSentOff(true);
        update( g );
end

rule "SF sent off with 5 personal fouls"
lock-on-active true
    when
   		g : Game()
        ge : GameEvent(sf.personalFouls==5) over window:time(30s) from entry-point DEFAULT
    then
    	g.getSf().setSentOff(true);
        update( g );
end

rule "SG sent off with 5 personal fouls"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sg.personalFouls==5) over window:time(30s) from entry-point DEFAULT
    then
    	g.getSg().setSentOff(true);
        update( g );
end

rule "PG sent off with 5 personal fouls"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pg.personalFouls==5) over window:time(30s) from entry-point DEFAULT
    then
    	g.getPg().setSentOff(true);
        update( g );
end

rule "Substitute sent off PG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pg.sentOff==true,subsPg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("Sent off PG needs to be substituted.");
        update( g );
end

rule "Substitute sent off SG"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sg.sentOff==true,subsSg.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSg();
    	g.setSg(g.getSubsSg());
    	g.setSubsSf(helpVariable);	
    	g.addExplanation("Sent off SG needs to be substituted.");
        update( g );
end


rule "Substitute sent off SF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(sf.sentOff==true,subsSf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getSf();
    	g.setSf(g.getSubsSf());
    	g.setSubsSf(helpVariable);	
    	g.addExplanation("Sent off SF needs to be substituted.");
        update( g );
end


rule "Substitute sent off PF"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(pf.sentOff==true,subsPf.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPf();
    	g.setPf(g.getSubsPf());
    	g.setSubsPf(helpVariable);	
    	g.addExplanation("Sent off PF needs to be substituted.");
        update( g );
end

rule "Substitute sent off C"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(c.sentOff==true,subsC.sentOff==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getC();
    	g.setC(g.getSubsC());
    	g.setSubsC(helpVariable);	
    	g.addExplanation("Substitute sent off C");
        update( g );
end

rule "Finish of the game and score difference is small-1"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute>39.5 && score < 3 && score > -3 && pg.averagePercentageOnePoint<subsPg.averagePercentageOnePoint && subsPg.averagePercentageOnePoint>pgSg.averagePercentageOnePoint && subsPg.sentOff==false && subsPg.hurt==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getSubsPg());
    	g.setSubsPg(helpVariable);	
    	g.addExplanation("There is only 30 second until the end of the game, and the score difference is small, so the solution is to substitute PG with the better one point shoting PG, because lot of one point shots are expected.");
        update( g );
end

rule "Finish of the game and score difference is small-2"
lock-on-active true
    when
    	g : Game()
        ge : GameEvent(minute>39.5,pg.averagePercentageOnePoint<pgSg.averagePercentageOnePoint,subsPg.averagePercentageOnePoint<pgSg.averagePercentageOnePoint,pgSg.sentOff==false,pgSg.hurt==false) over window:time(30s) from entry-point DEFAULT
    then
    	Player helpVariable = g.getPg();
    	g.setPg(g.getPgSg());
    	g.setPgSg(helpVariable);	
    	g.addExplanation("There is only 30 second until the end of the game, and the score difference is small, so the solution is to substitute PG with the better one point shoting PG, because lot of one point shots are expected.");
        update( g );
end

